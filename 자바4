//문제 1. JavaScript에서 클래스를 정의하는 키워드는 무엇인가요?
// class

//문제 2. `constructor`는 클래스에서 어떤 역할을 하나요?
//클래스가 인스턴스화될 때 호출되는 함수로, 객체의 초기상태 설정 (클래스로 생성된 객체의 속성 초기화)

//문제 3. 아래 코드에서 `alice` 객체의 `greet` 메서드를 호출하면 출력될 결과는 무엇인가요?
class Person {
    constructor(name) {
    this.name = name;
    }

    greet() {
    console.log(`Hello, my name is ${this.name}.`);
    }
}

const alice = new Person('Alice');

alice.greet(); //Hello, my name is Alice.

//문제 4. JavaScript에서 함수가 인수로 전달되는 방식을 무엇이라고 하나요?
//Callback, 콜백 함수

//문제 5. 아래 코드는 콜백 함수의 예시입니다. `greet` 함수에서 `callback` 함수를 호출하는 부분을 채워 넣으세요.
function greet(name, callback) {
    console.log(`Hello, ${name}`);
    callback();
}

function sayGoodbye() {
    console.log('Goodbye!');
}

greet('Alice', sayGoodbye);

//문제 6. 다음 코드에서 `result` 변수의 값은 무엇인가요?
const numbers = [1, 2, 3, 4, 5];
const result = numbers.map(num => num * 2);

console.log(result); //[ 2, 4, 6, 8, 10 ]

//문제 7. 클로저는 함수와 그 함수가 선언된 **무엇**의 조합인가요?
//어휘적 환경(Lexical Environment)

//문제 8. 아래 코드를 실행하면 어떤 결과가 나오는지 설명하세요.
function outer() {
    let count = 0;
    
    return function inner() {
    count++;
    
    console.log(count);
    };
}

const counter = outer();

counter(); //1
counter(); //2
//inner함수가 outer의 변수를 참조하고 있어 종료해도 inner가 count에 접근할 수 있기 때문이다.

//문제 9. 고차 함수란 **무엇**을 인수로 받거나 반환하는 함수인가요?
//함수

//문제 10. JavaScript에서 비동기 작업을 처리하기 위해 주로 사용하는 방법은 무엇인가요?
// Callback, (Promise, async/await)

//문제 11. 객체에서 메서드를 공유하여 메모리 효율성을 높이는 데 사용하는 JavaScript의 개념은 무엇인가요?
//프로토타입 (prototype)

//문제 12. 프로토타입 체인을 통해 JavaScript 객체가 다른 객체의 속성이나 메서드를 **무엇**하나요?\
//상속 (Inheritance)

//문제 13. 다음 코드에서 `speak` 메서드를 재정의(오버라이딩)하여 `Dog` 클래스가 `Rex barks`를 출력하도록 수정하세요.
class Animal {
    constructor(name) {
    this.name = name;
    }

    speak() {
    console.log(`${this.name} makes a sound.`);
    }
}

class Dog extends Animal {
    speak() {
        console.log(`${this.name} barks.`);
    }
}

const dog = new Dog('Rex');
dog.speak(); // Rex barks

//문제 14. 다음 코드를 고차 함수를 사용해 중복을 줄여보세요.
function repeat(n, action) {
    for (let i = 0; i <n; i++) {
        action();
    }
}

function repeatTwice() {
    repeat(2, () => {
        console.log("Repeated twice");
    });
}

function repeatThrice() {
    repeat(3, () => {
        console.log("Repeated thrice");
    });
}

repeatTwice();
repeatThrice();
